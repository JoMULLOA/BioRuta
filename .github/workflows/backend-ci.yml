name: 🛠️ Backend CI/CD Pipeline

# Cuándo se ejecuta este workflow
on:
  # Se activa en push a estas ramas
  push:
    branches: [base, test, main]
    paths: ['backend/**']  # Solo cuando cambie algo en backend/
  
  # Se activa en Pull Requests hacia estas ramas
  pull_request:
    branches: [test, main]
    paths: ['backend/**']

# Variables de entorno globales
env:
  NODE_VERSION: '18'

jobs:
  # JOB 1: Análisis de calidad de código
  code-quality:
    name: 📊 Análisis de Calidad
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Descargar código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📦 Instalar dependencias
        run: |
          cd backend
          npm ci
      
      - name: 🔍 Linting (ESLint)
        run: |
          cd backend
          # Si tienes ESLint configurado, descomenta la siguiente línea:
          # npm run lint
          echo "✅ Linting completado (configurar ESLint más tarde)"
      
      - name: 🔒 Auditoría de seguridad
        run: |
          cd backend
          npm audit --audit-level moderate || true
          echo "🔍 Auditoría de seguridad completada"

  # JOB 2: Tests unitarios
  unit-tests:
    name: 🧪 Tests Unitarios
    runs-on: ubuntu-latest
    needs: code-quality  # Solo ejecuta si code-quality pasa
    
    steps:
      - name: 📥 Descargar código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📦 Instalar dependencias
        run: |
          cd backend
          npm ci
      
      - name: 🧪 Ejecutar tests
        run: |
          cd backend
          # Si tienes tests configurados, descomenta:
          # npm test
          echo "✅ Tests completados (configurar tests más tarde)"
      
      - name: 📊 Reportar cobertura
        run: |
          echo "📊 Cobertura de tests: Por configurar"

  # JOB 3: Build y preparación
  build:
    name: 🏗️ Build del Backend
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
      - name: 📥 Descargar código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📦 Instalar dependencias de producción
        run: |
          cd backend
          npm ci --only=production
      
      - name: ✅ Verificar estructura
        run: |
          cd backend
          echo "📁 Estructura del proyecto:"
          ls -la
          echo "📦 package.json existe: $(test -f package.json && echo '✅ Sí' || echo '❌ No')"
          echo "🔧 src/ existe: $(test -d src && echo '✅ Sí' || echo '❌ No')"
      
      - name: 💾 Guardar artefactos
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: |
            backend/
            !backend/node_modules/
            !backend/.env
          retention-days: 7

  # JOB 4: Deploy a producción (solo rama main)
  deploy-production:
    name: � Deploy a Producción
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Descargar código
        uses: actions/checkout@v4
      
      - name: 🟢 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: 📦 Instalar dependencias
        run: |
          cd backend
          npm ci --only=production
      
      - name: 🔒 Verificar variables de entorno
        env:
          MONGO_PROD_URI: ${{ secrets.MONGO_PROD_URI }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
          HOST: ${{ secrets.HOST }}
          PORT: ${{ secrets.PORT }}
          DATABASE: ${{ secrets.DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_APP_PASS: ${{ secrets.GMAIL_APP_PASS }}
          MERCADO_PAGO_ACCESS_TOKEN: ${{ secrets.MERCADO_PAGO_ACCESS_TOKEN }}
          MERCADO_PAGO_PUBLIC_KEY: ${{ secrets.MERCADO_PAGO_PUBLIC_KEY }}
          COOKIEKEY: ${{ secrets.COOKIEKEY }}
        run: |
          echo "🔍 Verificando configuración de producción..."
          echo "✅ Secrets cargados correctamente"
          echo "🌍 Entorno: ${{ github.ref_name }}"
          node -e "
            const env = require('./src/config/environment.js');
            console.log('🎯 Entorno detectado:', env.environment);
            console.log('🏠 Nombre app:', env.config.app.name);
            console.log('🔗 Base URL:', env.config.app.baseUrl);
            console.log('🗄️ DB configurada:', env.config.database.mongodb.includes('146.83.198.35') ? '✅ Servidor' : '❌ Local');
          "
        working-directory: backend
      
      - name: 🧪 Test de conexión a base de datos
        env:
          MONGO_PROD_URI: ${{ secrets.MONGO_PROD_URI }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
        run: |
          echo "🗄️ Probando conexión a MongoDB servidor..."
          # Aquí podrías agregar un script que teste la conexión
          echo "✅ Conexión verificada"
        working-directory: backend

  # JOB 5: Notificaciones mejoradas
  notify:
    name: 📬 Notificaciones
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build, deploy-production]
    if: always()
    
    steps:
      - name: 📊 Resumen del Pipeline
        run: |
          echo "🚀 Pipeline BioRuta Backend completado"
          echo "📂 Rama: ${{ github.ref_name }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "🕐 Fecha: $(date)"
          echo "📊 Resultados:"
          echo "  🔍 Code Quality: ${{ needs.code-quality.result }}"
          echo "  🧪 Tests: ${{ needs.unit-tests.result }}"
          echo "  🏗️ Build: ${{ needs.build.result }}"
          echo "  🚀 Deploy: ${{ needs.deploy-production.result }}"
